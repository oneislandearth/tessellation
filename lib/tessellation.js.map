{"version":3,"sources":["../src/tessellation.js"],"names":["Tessellation","constructor","vertices","faces","divisions","faces1","addVertex","i0","i1","factor","ia","ib","ic","iab","iac","push","i","iab1","iac1","j"],"mappings":"iEACA,8BAGO,KAAMA,CAAAA,YAAa,CAGxBC,WAAW,CAAC,CAAEC,QAAF,CAAYC,KAAZ,CAAmBC,SAAS,CAAG,CAA/B,CAAD,CAAqC,CAG9CA,SAAS,EAAI,CAAb,CAGA,KAAMC,CAAAA,MAAM,CAAG,EAAf,CAGA,KAAMC,CAAAA,SAAS,CAAG,CAACC,EAAD,CAAKC,EAAL,CAASC,MAAT,GAAoB,mBAAQ,uBAAYP,QAAQ,CAACK,EAAD,CAApB,CAA0BL,QAAQ,CAACM,EAAD,CAAlC,CAAwCC,MAAxC,CAAR,CAAyDP,QAAzD,CAAtC,CAGA,IAAK,KAAM,CAACQ,EAAD,CAAKC,EAAL,CAASC,EAAT,CAAX,EAA2BT,CAAAA,KAA3B,CAAkC,CAGhC,KAAMU,CAAAA,GAAG,CAAGP,SAAS,CAACI,EAAD,CAAKC,EAAL,CAAU,EAAIP,SAAd,CAArB,CACA,KAAMU,CAAAA,GAAG,CAAGR,SAAS,CAACI,EAAD,CAAKE,EAAL,CAAU,EAAIR,SAAd,CAArB,CAGAC,MAAM,CAACU,IAAP,CAAY,CAACL,EAAD,CAAKG,GAAL,CAAUC,GAAV,CAAZ,EAGA,IAAK,GAAIE,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGZ,SAApB,CAA+B,EAAEY,CAAjC,CAAoC,CAGlC,KAAMC,CAAAA,IAAI,CAAGX,SAAS,CAACI,EAAD,CAAKC,EAAL,CAAU,CAACK,CAAC,CAAG,CAAL,EAAUZ,SAApB,CAAtB,CACA,KAAMc,CAAAA,IAAI,CAAGZ,SAAS,CAACI,EAAD,CAAKE,EAAL,CAAU,CAACI,CAAC,CAAG,CAAL,EAAUZ,SAApB,CAAtB,CAGA,IAAK,GAAIe,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,EAAIH,CAArB,CAAwB,EAAEG,CAA1B,CAA6B,CAG3Bd,MAAM,CAACU,IAAP,CAAY,CAACT,SAAS,CAACO,GAAD,CAAMC,GAAN,CAAYK,CAAC,CAAGH,CAAhB,CAAV,CAA+BV,SAAS,CAACW,IAAD,CAAOC,IAAP,CAAcC,CAAC,EAAIH,CAAC,CAAG,CAAR,CAAf,CAAxC,CAAqEV,SAAS,CAACW,IAAD,CAAOC,IAAP,CAAc,CAACC,CAAC,CAAG,CAAL,GAAWH,CAAC,CAAG,CAAf,CAAd,CAA9E,CAAZ,EAGA,GAAIG,CAAC,CAAGH,CAAR,CAAWX,MAAM,CAACU,IAAP,CAAY,CAACT,SAAS,CAACO,GAAD,CAAMC,GAAN,CAAYK,CAAC,CAAGH,CAAhB,CAAV,CAA+BV,SAAS,CAACW,IAAD,CAAOC,IAAP,CAAc,CAACC,CAAC,CAAG,CAAL,GAAWH,CAAC,CAAG,CAAf,CAAd,CAAxC,CAA2EV,SAAS,CAACO,GAAD,CAAMC,GAAN,CAAY,CAACK,CAAC,CAAG,CAAL,EAAUH,CAAtB,CAApF,CAAZ,CACZ,CACF,CACF,CAGD,MAAO,CACLd,QADK,CAELC,KAAK,CAAEE,MAFF,CAIR,CAhDuB,C","sourcesContent":["// Import the required utilties\nimport { addOnce, interpolate } from './utils';\n\n// Define the class for performing tessellation\nexport class Tessellation {\n\n  // Create a tessellation from vertices and faces\n  constructor({ vertices, faces, divisions = 0 }) {\n\n    // Add one to the number of divisions (zero represents no divisions)\n    divisions += 1;\n\n    // Define the list of new faces\n    const faces1 = [];\n\n    // Add the new interpolated point to the vertices\n    const addVertex = (i0, i1, factor) => addOnce(interpolate(vertices[i0], vertices[i1], factor), vertices);\n\n    // Iterate through each of the faces\n    for (const [ia, ib, ic] of faces) {\n\n      // Interpolate the new vertices and add them to the list returning their vertices\n      const iab = addVertex(ia, ib, (1 / divisions));\n      const iac = addVertex(ia, ic, (1 / divisions));\n\n      // Add the new face to the faces\n      faces1.push([ia, iab, iac]);\n\n      // Iterate for a number of times relative to divisions\n      for (let i = 1; i < divisions; ++i) {\n\n        // Interpolate the new vertices and add them to the list returning their vertices\n        const iab1 = addVertex(ia, ib, ((i + 1) / divisions));\n        const iac1 = addVertex(ia, ic, ((i + 1) / divisions));\n\n        // Iterate for a number of times relative to number of subdivisions\n        for (let j = 0; j <= i; ++j) {\n\n          // Add the face to the faces set\n          faces1.push([addVertex(iab, iac, (j / i)), addVertex(iab1, iac1, (j / (i + 1))), addVertex(iab1, iac1, ((j + 1) / (i + 1)))]);\n  \n          // Add the new face to the faces set\n          if (j < i) faces1.push([addVertex(iab, iac, (j / i)), addVertex(iab1, iac1, ((j + 1) / (i + 1))), addVertex(iab, iac, ((j + 1) / i))]);\n        }\n      }\n    }\n\n    // Return the list of faces and vertices\n    return {\n      vertices,\n      faces: faces1\n    };\n  }\n}"],"file":"tessellation.js"}